/*
 * Copyright (C) 2018. OpenLattice, Inc.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * You can contact the owner of the copyright at support@openlattice.com
 *
 *
 */

package com.openlattice.linking.matching

import com.codahale.metrics.annotation.Timed
import com.google.common.base.Stopwatch
import com.openlattice.data.EntityDataKey
import com.openlattice.linking.Matcher
import com.openlattice.linking.util.PersonMetric
import com.openlattice.rhizome.hazelcast.DelegatedStringSet
import org.apache.olingo.commons.api.edm.FullQualifiedName
import org.deeplearning4j.nn.multilayer.MultiLayerNetwork
import org.nd4j.linalg.factory.Nd4j
import org.slf4j.LoggerFactory
import org.springframework.stereotype.Component
import java.util.*
import java.util.concurrent.TimeUnit

const val THRESHOLD = 0.9
private val logger = LoggerFactory.getLogger(SocratesMatcher::class.java)

/**
 * Performs matching using the model generated by Socrates.
 */
@Component
class SocratesMatcher(model: MultiLayerNetwork, private val fqnToIdMap: Map<FullQualifiedName, UUID>) : Matcher {
    private var extractionMillis = 0L
    private var matchingMillis = 0L
    private var localModel = ThreadLocal.withInitial { model }

    //            Thread.currentThread().contextClassLoader.getResourceAsStream("model.bin") }

    override fun updateMatchingModel(model: MultiLayerNetwork) {
        localModel = ThreadLocal.withInitial { model }
    }

    @Timed
    override fun initialize(
            block: Pair<EntityDataKey, Map<EntityDataKey, Map<UUID, Set<Any>>>>
    ): Pair<EntityDataKey, MutableMap<EntityDataKey, MutableMap<EntityDataKey, Double>>> {
        val model = localModel.get()

        val entityDataKey = block.first
        val entities = block.second

        val extractedEntities = entities.mapValues { extractProperties(it.value) }

        val matchedEntities = extractedEntities
                .mapValues { computeScore(model, extractedEntities[entityDataKey]!!, it.value) }
                .toMutableMap()
        val initializedBlock = entityDataKey to mutableMapOf(entityDataKey to matchedEntities)
        trimAndMerge(initializedBlock)
        return initializedBlock
    }

    /**
     * Computes the pairwise matching values for a block.
     * @param block The resulting block around for the entity data key in block.first
     * @return All pairs of entities in the block scored by the current model.
     */
    @Timed
    override fun match(
            block: Pair<EntityDataKey, Map<EntityDataKey, Map<UUID, Set<Any>>>>
    ): Pair<EntityDataKey, MutableMap<EntityDataKey, MutableMap<EntityDataKey, Double>>> {
        val sw = Stopwatch.createStarted()
        val model = localModel.get()

        val entityDataKey = block.first
        val entities = block.second

        val extractedEntities = entities.mapValues { extractProperties(it.value) }

        val matchedEntities = extractedEntities.mapValues {
            val entity = it.value
            extractedEntities
                    .mapValues { computeScore(model, entity, it.value) }
                    .toMutableMap()
        }.toMutableMap()
        logger.info(
                "Matching block {} with {} elements took {} ",
                block.first, block.second.values.map { it.size }.sum(),
                sw.elapsed(TimeUnit.MILLISECONDS)
        )
        return entityDataKey to matchedEntities
    }

    private fun computeScore(
            model: MultiLayerNetwork, lhs: Map<UUID, DelegatedStringSet>, rhs: Map<UUID, DelegatedStringSet>
    ): Double {
        val sw = Stopwatch.createStarted()
        val (extractionTimeMillis, features) = extractFeatures(sw, lhs, rhs)
        val score = model.getModelScore(features)
        val totalMillis = sw.elapsed(TimeUnit.MILLISECONDS)
        val matchingMillis = totalMillis - extractionTimeMillis

        logger.info(
                "Feature extraction = {} ms, Matching = {} ms, % time spent matching {}", extractionTimeMillis,
                matchingMillis, (1.0 * matchingMillis) / totalMillis
        )

        return score
    }

    private fun extractFeatures(
            sw: Stopwatch, lhs: Map<UUID, DelegatedStringSet>, rhs: Map<UUID, DelegatedStringSet>
    ): Pair<Long, Array<DoubleArray>> {
        val features = arrayOf(
                PersonMetric.pDistance(
                        lhs, rhs, fqnToIdMap
                ).map { it * 100.0 }.toDoubleArray()
        )
        val elapsedMillis = sw.elapsed(TimeUnit.MILLISECONDS)

        extractionMillis += elapsedMillis
        return elapsedMillis to features;
    }

    private fun extractProperties(entity: Map<UUID, Set<Any>>): Map<UUID, DelegatedStringSet> {
        return entity.map { it.key to DelegatedStringSet.wrap(it.value.map { it.toString() }.toSet()) }.toMap()
    }

    @Timed
    override fun trimAndMerge(
            matchedBlock: Pair<EntityDataKey, MutableMap<EntityDataKey, MutableMap<EntityDataKey, Double>>>
    ) {
        //Trim non-center matching thigns.
        matchedBlock.second[matchedBlock.first] = matchedBlock.second[matchedBlock.first]?.filter { it.value > THRESHOLD }?.toMutableMap() ?: mutableMapOf()
    }
}

fun MultiLayerNetwork.getModelScore(features: Array<DoubleArray>): Double {
    return try {
        output(Nd4j.create(features)).getDouble(0)
    } catch (ex: Exception) {
        logger.error("Failed to compute model score trying again! Features = {}", features.toList(), ex)
        try {
            output(Nd4j.create(features)).getDouble(0)
        } catch (ex2: Exception) {
            logger.error("Failed to compute model score a second time! Return 0! Features = {}", features.toList(), ex)
            0.0
        }
    }

}

